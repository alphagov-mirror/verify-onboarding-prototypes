# Dropwizard server connector configuration
# see: http://www.dropwizard.io/1.1.2/docs/manual/configuration.html#servers
server:
  applicationConnectors:
    - type: http
      port: 50400
  adminConnectors:
    - type: http
      port: 50401

# Logging configuration
# see: http://www.dropwizard.io/1.1.2/docs/manual/configuration.html#logging
logging:
  level: INFO
  loggers:
    "uk.gov": DEBUG
  appenders:
    - type: console
    - type: file
      currentLogFilename: logs/verify-service-provider.log
      archivedLogFilenamePattern: logs/verify-service-provider.log.%d.gz

# Location where Verify Hub authentication flow begins
hubSsoLocation: ${HUB_SSO_LOCATION:-http://localhost:50410/SAML2/SSO}

# Entity ID that uniquely identifies the hub
hubEntityId: ${HUB_ENTITY_ID:-default-hub-entity-id}

# Entity that identifies the relying party's Matching Service Adapater
msaEntityId: ${MSA_ENTITY_ID:-default-msa-entity-id}

# Location of hub metadata
# Verify Service Provider consumes the metadata and
# Hub Public certificates from the metadata to identify the hub
hubMetadataUrl: ${HUB_METADATA_URL:-default-hub-metadata-url}

# Location of Matching Service Metadata
# Verify Service Provider consumes the metadata and uses
# public certificates from it to identify the msa
msaMetadataUrl: ${MSA_METADATA_URL:-default-msa-metadata-url}

# A random string that is used to seed to generate tokens.
# Secure tokens are used to ensure that AuthnRequest and SAML response
# are coming from the same browser.
secureTokenSeed: ${SECURE_TOKEN_SEED:-default-secure-token-seed}

# Private key that is used to sign an AuthnRequest
signingPrivateKey: ${SIGNING_PRIVATE_KEY:-MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC231ixwpqaLJxQXXlHMXC/90euL6Lr8VxAU8+Yc5ne5kz9qLgRBnI61+nqgvyt44GF+0yaPHbi6N1rrkiWJbFe6m75xLjYSqmbI6afzdm83Wl3YALZaQYaa89jGuIOwvi4e5JF0BWPbEak+QDT3Np7a/slRZhBU/mvctOI6UWoSTmRBpdS/f8BUJKZuaniwHGW6ooRce2DreWDzvCh9r0sWNIcu/Zskc95Yvn54yVO2o36QnHwyHntaPSaZ+mTbcL0TB5Z4dquMsLbsImECpXNBa9QeeSYdcmXaP5JkqkavVzU8HnLlerbQ1RjEtoZQgv5AxrgcIY+L1ytZFb+9z8BAgMBAAECggEAIVEns5sk15nxEKM3CUV0qUTABngfUqUyjXW3iKrnCbkjpcMrZc6q2RWlRFiA+J1OZ76VAjSp5EVQseGaz+AmJIjJly/EDYPsypsALHUwijw8jscrPbjop7+klQW80bur3NCGobl7dBnh9QR4piDCnWHa67t2NdC62MAu0e7OBg6hUUSs9NolE/3ihfIs9ESdOJulazp81f98iZDRQfDVF1HgLfmI0y2cRJzN2D4N7Ssf/pQ3eIg79HsrJFl5MPt2DCtpD/LaeOe6jrhIj0BplhggV+v++LUT1UykHw72+jA4GgTAPt5I4JVV2BCYWdbvgi/Hp/HIxO5Ke+YSCTM8AQKBgQD+dP4audCnAe51znVS0AwNkbTsoMKvPtOpD/fd0QIgE8rJHnugod1ZZYm5rIJbc9s/MVnnVFzycAo5FJZGEs8RQxsAwC+NE2MgeM6GMzzpoRQp2kL4m9MWz9OU50vBR0EslJNZ5NTMXoP9DVqhnCfu4o61X8mDBiyIuH/3W70z0QKBgQC3+zqyFMeWpNc1qy1LL3yy+ygbXPYU1d6OPz0n2sX61KdCivNCvMJd2E6FZ3OyB74ahOT7M14j0Zt1zvX4AuDsXINrvlGY6Li/UkUVa+Im1/IRxIISvHwCDwNp/Zyfwt1O0g4sxhxKKhxtQorX9D2tDuxAoXfp8k57kxyBnXQUMQKBgQC/0Ht4tBf4vTj/71l7yr87P1pOgkUgC9FMgXAM8zCR87mK8IKrLTmJ2UQABm3h+K0OruohuvOyAgmCy+UX/7e+QILLhxSRWUsBQHAWs+s4BqgHgLO5auWuLY5GkjEGCuuzanDFc/2B7cG7cWSfrPJhXsHLMeDa9z189u/oDGzM8QKBgH+a+U/wh6oddMLdkhG2wwekmWG5LViwKaeBhxowa+aYPdYyZ5yfLTRHxdZTNXSCWEEucV8ldqLjS67/N6yn2nc1h1VgcFnc996C4jWEWRvV5Sibohf6sQwAe760z0AjuLllib1WPuLVqFfDsmcsGOcCFaySEYiqrfKZy0i++3bRAoGBAPMder/yR0XcPyuA0YnzsLpTdO6i6jB3bLZwFD9zpRb4X5p3pP56QG/dfOwHlcC0bcDQksmyyhkTvvkifg9eAc5C4xn+6QACcL0fK4mJUuHyU16HlyBW/hxR28h7uXJy1Kc8ct2lYdMbvvRhU5qtf3egHCIPlA63CVw/S8LWk1uz}

# Private Keys that are used to decrypt any assertions that
# come from the msa. if a key rotation needs to happen,
# the new keys can be added to the list.
decryptionPrivateKeys: [${DECRYPTION_PRIVATE_KEYS:-default-decryption-private-key-1,default-decryption-private-key-2}]
