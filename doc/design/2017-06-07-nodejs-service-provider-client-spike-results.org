* [2017-06-07 Wed] Results from a spike on node js Verify Service Provider integration

== Context ==

- Verify Service Provider will be it's own service with a JSON-api
- Node js applications need to integrate with the Verify Service Provider
- A current customer has chosen to use PassportJS with passport-saml as an authentication middleware
- In an attempt to minimize the impact of switching from passport-saml to use Verify Service Provider
  we investigated a possible implementation of a custom PassportJS strategy.
- In case the customer has no other use for PassportJS we also investigated a middleware solution that
  does not depend on PassportJS

== Verify PassportJS Strategy ==

PassportJS Strategy has a small interface that needs to be implemented.

```
class VerifyStrategy extends passport.Strategy {

  authenticate(request, options) {

    // Create a SAMLAuthnRequest
    // Redirect user with a form POST (the only way to do this is to access request.response, which is an undocumented feature of express.js)
    // Read SAML response from Verify

    // on successful authentication
    // this.success(user)

    // on unsuccessful authentication
    // this.fail(message, statuscode)

    // on error case
    // this.error(message, statuscode)
  }

}
```

Customer Application would have to initialize the PassportJS middleware with the strategy and use it.

```
passport.use(new VerifyStrategy(...options...))

router.post('/login-route', passport.authenticate('verify-strategy', {... options ...}))
```

** Pros **
- If customer is already using PassportJS, adding another Strategy is straightforward
- PassportJS takes care of common behaviour around authentication flows (error messages, redirection)
- Developers who are familiar with PassportJS can easily plug in the Strategy.

** Cons **

- The Strategy is dependent on an undocumentend express.js functionality
  Redirecting users with a form-post requires dodgy access to the response object.
  The functionality has been in express.js since its birth, but is undocumented.
- The Strategy is only compatible with express.js + PassportJS applications.
  Other node.js customers would have to use a different solution.
- authenticate()-function needs to handle both SamlAuthnRequest-flow and SamlAuthnResponse-flow
  which breaks single responsibility principle on the function itself.
- There is no good way for allowing the Application to render the form while still following
  PassportJS behaviour.

== Verify Authenticate Library ==

In order to Authenticate with Verify without PassportJS, the customer can use a library directly.

```
VerifyAuthenticate = {

  renderAuthnRequest: async function (req, res, next) {
    // create SAML Authn Request
    // redirect user with the saml using the response object
  },

  getAuthnRequest: async function (...options...) {
    // return SAML Authn Request
  },

  readAuthnResponse: async function (req, options) {
    // read SAML from request
    // return user or throw an error
  }

}


```

```
// let VerifyAuthenticate render form-post
router.post('/login-route', VerifyAuthenticate.renderAuthnRequest(...options...)

// alternatively have more control over the form by rendering form-post in the application
router.post('/login-route', async function (req, res, next) {
  let saml = VerifyAuthenticate.getAuthnRequest(...options...)
  // render form-post possibly with a RelayState
})

router.post('/login-callback-route', async function (req, res, next) {
  let user = await VerifyAuthenticate.readAuthnResponse(req, ...options...)
  // do things
})
```

** Pros **
- The application has more control over how authentication is done
- Works with an express.js + PassportJS app and also any other nodejs app
- Easier to maintain as there are no dependencies on an api of another library
- The authentication middleware is specific to Verify
- Easy to replicate with any language (`verify-authenticate.hs`)

** Cons ** 
- In case the customer wants to integrate with several authentication solutions
  they would have to write boilerplate to glue PassportJS and VerifyAuthenticate together.


