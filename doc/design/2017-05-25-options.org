* [2017-05-25 Thu] Verify service provider architecture options

** The basics

The SAML service provider has to do two fundamental things:

- Produce SAML AuthnRequests
- Validate and unpack SAML Responses

See [[file:images/2017-05-25-basic.png][2017-05-25-basic.png]].

#+BEGIN_SRC plantuml :file images/2017-05-25-basic.png
actor Bob

== Verify AuthnRequest ==

Bob -> Service: GET /verify/start
Service -> Bob: 200 OK <form><input value="some-saml-request">...
Bob -> Verify: POST SAMLRequest=some-saml-request
Verify -> Bob: 200 OK <html>Have you used Verify before?

== Verify Response ==

Bob -> Verify: GET /redirect-to-service
Verify -> Bob: 200 OK <form><input value="some-saml-response">...
Bob -> Service: POST SAMLResponse=some-saml-response
Service -> Bob: 303 Redirect Set-Cookie: session=some-session

== Logged in service pages ==

Bob -> Service: GET /logged-in-page
Service -> Bob: 200 OK <html>Hello Bob!
#+END_SRC

#+RESULTS:
[[file:images/2017-05-25-basic.png]]

** SAML Engine alike

Possibly the simplest way that a verify-service-provider could
work would be similar to how SAML engine works in the hub.

You'd have a service running as an HTTP server, you'd send it a GET
request to build an AuthnRequest and POST it a Response.

See [[file:images/2017-05-25-saml-engine-a-like.png][2017-05-25-saml-engine-a-like.png]]


#+BEGIN_SRC plantuml :file images/2017-05-25-saml-engine-a-like.png
actor Bob

== Verify AuthnRequest ==

Bob -> Service: GET /verify/start
Service -> "Verify Service Provider": GET /AuthnRequest
"Verify Service Provider" -> Service: 200 OK some-saml-request...
Service -> Bob: 200 OK <form><input value="some-saml-request">...
Bob -> Verify: POST SAMLRequest=some-saml-request
Verify -> Bob: 200 OK <html>Have you used Verify before?

== Verify Response ==

Bob -> Verify: GET /redirect-to-service
Verify -> Bob: 200 OK <form><input value="some-saml-response">...
Bob -> Service: POST SAMLResponse=some-saml-response
Service -> "Verify Service Provider": POST {"SAMLResponse":"some-saml-response"}
"Verify Service Provider" -> Service: 200 OK {"id":"bob"}
Service -> Bob: 303 Redirect Set-Cookie: session=some-session

== Logged in service pages ==

Bob -> Service: GET /logged-in-page
Service -> Bob: 200 OK <html>Hello Bob!
#+END_SRC

#+RESULTS:
[[file:images/2017-05-25-saml-engine-a-like.png]]

** Service provider serves pages behind reverse proxy

Alternatively (and a bit more complicatedly) we could sit the service-provider behind
a reverse proxy and have it serve actual pages to the user. 

This would mean there would be less code needed in the frontend, but there would be
more complexity in the network setup.

See [[file:images/2017-05-25-serves-pages-behind-reverse-proxy.png][2017-05-25-serves-pages-behind-reverse-proxy.png]]

#+BEGIN_SRC plantuml :file images/2017-05-25-serves-pages-behind-reverse-proxy.png
actor Bob

== Anonymous service pages ==

Bob -> "Reverse Proxy": GET /service/description
"Reverse Proxy" -> Service: GET /service/description
Service -> "Reverse Proxy": 200 OK <html>...
"Reverse Proxy" -> Bob: 200 OK <html>...

== Verify AuthnRequest ==

Bob -> "Reverse Proxy": GET /verify/start
note right of "Reverse Proxy": Reverse proxy directs /verify/* to the Verify Service Provider
"Reverse Proxy" -> "Verify Service Provider": GET /verify/start
"Verify Service Provider" -> "Reverse Proxy": 200 OK <form><input value="some-saml-request">...
"Reverse Proxy" -> Bob: 200 OK <form><input value="some-saml-request">...
Bob -> Verify: POST SAMLRequest=some-saml-request
Verify -> Bob: 200 OK <html>Have you used Verify before?

== Verify Response ==

Bob -> Verify: GET /redirect-to-service
Verify -> Bob: 200 OK <form><input value="some-saml-response">...
Bob -> "Reverse Proxy": POST /verify/end SAMLResponse=some-saml-response
"Reverse Proxy" -> "Verify Service Provider": POST  /verify/end SAMLResponse=some-saml-response
"Verify Service Provider" -> "Reverse Proxy": 303 Redirect Set-Cookie: session=some-jwt
"Reverse Proxy" -> Bob: 303 Redirect Set-Cookie: session=some-jwt

== Logged in service pages ==

Bob -> "Reverse Proxy": GET /logged-in-page
"Reverse Proxy" -> Service: GET /logged-in-page
Service -> "Reverse Proxy" : 200 OK <html>Hello Bob!
"Reverse Proxy" -> Bob: 200 OK <html>Hello Bob!

#+END_SRC

#+RESULTS:
[[file:images/2017-05-25-serves-pages-behind-reverse-proxy.png]]

